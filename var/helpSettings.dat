###############################################################################
#          Global settings (defined in first part of spads.conf file)         #
###############################################################################
[global:lobbyHost]
Lobby server hostname
-
Hostname or IP address of the Spring lobby server
-
Hostname or IP address
-
lobby.springrts.com

[global:lobbyPort]
Lobby server port
-
Port of the Spring lobby server
-
Any valid port number
-
8200

[global:lobbyTls]
Lobby TLS mode
-
Specifies if TLS encryption must be used for the connection to the lobby server.
-
on: TLS is enabled (SPADS will exit if it can't establish a TLS encrypted connection to the lobby server)
off: TLS is disabled (SPADS will use a plaintext connection to the lobby server)
auto: TLS is enabled only if the required libraries are available
-
auto

[global:lobbyReconnectDelay]
Delay before reconnecting to lobby server
-
When SPADS is disconnected from the lobby server, it tries to reconnect immediately.
But when it fails to reconnect due to network problems, it waits this amount of seconds before trying to reconnect another time.
A value of 0 disables reconnection.
It is possible to specify a range, in this case the reconnect delay value is chosen randomly inside the range.
-
Integer: number of seconds to wait before trying to reconnect
<min>-<max>: range of seconds to wait before trying to reconnect (random delay mode)
-
30

[global:lobbyFollowRedirect]
Follow lobby server redirection
-
If enabled, SPADS will follow redirection orders from Spring lobby server.
If disabled, it will keep trying to connect to the hostname specified by [global:lobbyHost].
-
0: disabled
1: enabled
-
1

[global:lobbyLogin]
AutoHost lobby name
-
Name of the AutoHost in Spring lobby
-
Any valid lobby login
-
%lobbyLogin% (set during installation, example: "Spads")

[global:lobbyPassword]
AutoHost lobby password
-
Spring lobby password for the AutoHost account
-
Any valid lobby password
-
%lobbyPassword% (set during installation, example: "abcdefgh")

[global:localLanIp]
LAN IP of the AutoHost
-
If the AutoHost is connected to a LAN, this is the AutoHost IP address on this LAN.
This parameter is used by the Spring lobby server to allow players from the same LAN to play on this AutoHost.
-
<null>: the local LAN IP is auto-detected
*: the AutoHost isn't connected to a LAN
Any valid LAN IP address: this IP is sent to lobby server as local LAN IP
-
<null>

[global:autoHostPort]
AutoHost private port
-
UDP port used for local communication between AutoHost and Spring server
-
Any valid port number
-
8454

[global:forceHostIp]
Force hosting IP address
-
By default, Spring server detects the latest IP protocol version and the corresponding network interfaces available on your system, and use them for hosting.
But if the "forceHostIp" setting is set to a valid IP address, then Spring server will use this IP address for hosting instead of the auto-detected ones.
If you have problem with hosting on your system and if you think it's related to IPv6, you may want to try setting "forceHostIp" to "0.0.0.0".
-
<null>: the auto-detected interfaces are used for hosting
Any valid IP address: the provided IP address is used for hosting
-
<null>

[global:etcDir]
SPADS configuration directory
-
Location of SPADS configuration files. This directory path can be an absolute path or a path relative to SPADS installation directory.
-
Any readable directory
-
%etcDir% (set during installation, examples: "etc", "/var/home/spring/spads/etc", "C:\Program files\Spads\etc")

[global:varDir]
SPADS dynamic data directory
-
Location of SPADS dynamic data. This directory path can be an absolute path or a path relative to SPADS installation directory.
-
Any writable directory
-
%varDir% (set during installation, examples: "var", "/var/home/spring/spads/var", "C:\Program files\Spads\var")

[global:instanceDir]
SPADS instance-specific dynamic data directory
-
Location of SPADS instance-specific dynamic data (all SPADS instances running simultaneously on a system must use a different instance-specific directory). This directory path can be an absolute path or a path relative to [global:varDir] directory.
If you run multiple SPADS instances simultaneously from a single SPADS installation, then you need to configure this setting so that each one of these instances uses a distinct instance-specific directory (for example you can use the lobby login to distinguish them, or numbers...).
If you run only one SPADS instance from this SPADS installation, then you can leave this setting empty.
-
<null>: no instance-specific directory configured ([global:varDir] directory is used instead), so only one SPADS instance can be launched from this SPADS installation
Any writable directory: this directory is used for instance-specific data, it must be distinct for each SPADS instance launched from the same SPADS installation
-
<null>

[global:logDir]
SPADS log directory
-
Location of SPADS log files. This directory path can be an absolute path or a path relative to [global:instanceDir] directory.
-
Any writable directory
-
%logDir% (set during installation, examples: "log", "/var/home/spring/spads/var/log", "C:\Program files\Spads\var\log")

[global:bansData]
Bans data mode
-
Data storage and sharing mode for players bans.
When set to "private", the data file is stored in the [global:instanceDir] directory and is private to each SPADS instance.
When set to "shared", the data file is stored in the [global:varDir] directory by default and is shared between all SPADS instances that use the same configuration.
The default file name for the data file is "bans.dat". When using shared mode, an alternate file name/location can be provided in parentheses after the "shared" keyword to use a specific non-default name/location for the data file.
-
private: bans are private to each SPADS instance and stored in the "bans.dat" file located in the [global:instanceDir] directory
shared: bans are shared between all SPADS instances that use the same configuration and stored in the "bans.dat" file located in the [global:varDir] directory
shared(<fileLocation>): bans are shared between all SPADS instances that use the same configuration and stored in the <fileLocation> file (if <fileLocation> is a relative path, it is relative to the [global:varDir] directory)
-
shared

[global:mapInfoCacheData]
Map information cache data mode
-
Data storage and sharing mode for the map information cache. This cache contains map specific data such as map options, size and start positions.
When set to "private", the data file is stored in the [global:instanceDir] directory and is private to each SPADS instance.
When set to "shared", the data file is stored in the [global:varDir] directory by default and is shared between all SPADS instances that use the same configuration.
The default file name for the data file is "mapInfoCache.dat". When using shared mode, an alternate file name/location can be provided in parentheses after the "shared" keyword to use a specific non-default name/location for the data file.
-
private: the map information cache is private to each SPADS instance and stored in the "mapInfoCache.dat" file located in the [global:instanceDir] directory
shared: the map information cache is shared between all SPADS instances that use the same configuration and stored in the "mapInfoCache.dat" file located in the [global:varDir] directory
shared(<fileLocation>): the map information cache is shared between all SPADS instances that use the same configuration and stored in the <fileLocation> file (if <fileLocation> is a relative path, it is relative to the [global:varDir] directory)
-
shared

[global:savedBoxesData]
Saved map start boxes data mode
-
Data storage and sharing mode for saved map start boxes.
When set to "private", the data file is stored in the [global:instanceDir] directory and is private to each SPADS instance.
When set to "shared", the data file is stored in the [global:varDir] directory by default and is shared between all SPADS instances that use the same configuration.
The default file name for the data file is "savedBoxes.dat". When using shared mode, an alternate file name/location can be provided in parentheses after the "shared" keyword to use a specific non-default name/location for the data file.
-
private: saved start boxes are private to each SPADS instance and stored in the "savedBoxes.dat" file located in the [global:instanceDir] directory
shared: saved start boxes are shared between all SPADS instances that use the same configuration and stored in the "savedBoxes.dat" file located in the [global:varDir] directory
shared(<fileLocation>): saved start boxes are shared between all SPADS instances that use the same configuration and stored in the <fileLocation> file (if <fileLocation> is a relative path, it is relative to the [global:varDir] directory)
-
shared

[global:trustedLobbyCertificatesData]
Trusted lobby certificates data mode
-
Data storage and sharing mode for trusted lobby certificates.
When set to "private", the data file is stored in the [global:instanceDir] directory and is private to each SPADS instance.
When set to "shared", the data file is stored in the [global:varDir] directory by default and is shared between all SPADS instances that use the same configuration.
The default file name for the data file is "trustedLobbyCertificates.dat". When using shared mode, an alternate file name/location can be provided in parentheses "shared" keyword to use a specific non-default name/location for the data file.
-
private: trusted lobby certificates are private to each SPADS instance and stored in the "trustedLobbyCertificates.dat" file located in the [global:instanceDir] directory
shared: trusted lobby certificates are shared between all SPADS instances that use the same configuration and stored in the "trustedLobbyCertificates.dat" file located in the [global:varDir] directory
shared(<fileLocation>): trusted lobby certificates are shared between all SPADS instances that use the same configuration and stored in the <fileLocation> file (if <fileLocation> is a relative path, it is relative to the [global:varDir] directory)
-
shared

[global:preferencesData]
Players preferences data mode
-
Data storage and sharing mode for players preferences.
When set to "private", the data file is named "preferences.dat". It is stored in the [global:instanceDir] directory and is private to each SPADS instance.
When set to "shared", the data file is named "preferences.sqlite" by default. It is stored in the [global:varDir] directory by default and is shared between all SPADS instances that use the same configuration (this mode requires the DBD::SQLite Perl module).
When using shared mode, an alternate file name/location can be provided in parentheses after the "shared" keyword to use a specific non-default name/location for the data file.
-
private: players preferences are private to each SPADS instance and stored in the "preferences.dat" file located in the [global:instanceDir] directory
shared: players preferences are shared between all SPADS instances that use the same configuration and stored in the "preferences.sqlite" file located in the [global:varDir] directory
shared(<fileLocation>): players preferences are shared between all SPADS instances that use the same configuration and stored in the <fileLocation> file (if <fileLocation> is a relative path, it is relative to the [global:varDir] directory)
-
%preferencesData% (set during installation: "shared" if SQLite availability is detected, "private" else)

[global:sharedDataRefreshDelay]
Shared data refresh delay
-
Delay in seconds between checks for updates in shared data files. This is the maximum delay before an update performed in shared data by one SPADS instance is applied to the other instances.
A value of 0 disables periodic checks for updates in shared data files (in this case shared data are only refreshed when the instance needs to update it, to avoid overwriting changes made by other instances).
-
Integer
-
5

[global:autoUpdateRelease]
Auto-update release
-
Name of the SPADS release to auto-update to.
-
<null>: auto-update is disabled
stable: auto-update to "stable" release (latest official release)
testing: auto-update to "testing" release (public testing release)
unstable: auto-update to "unstable" release (release in development)
contrib: auto-update to "contrib" release (public testing release + unchecked external patches)
-
%release% (set during installation)

[global:autoUpdateDelay]
Auto-update delay
-
Delay in minutes between checks of SPADS repository for update.
A value of 0 disables auto-update when SPADS is running, but SPADS keeps auto-updating at start if the <autoUpdateRelease> parameter is defined.
-
Integer
-
60

[global:autoRestartForUpdate]
Auto-restart for update
-
Specifies if SPADS must check regularly if its packages have been updated, and how it must restart on update.
-
off: SPADS doesn't check if its packages have been updated, and thus never auto-restarts for update
whenEmpty: SPADS auto-restarts for update only when no game is running and battle is empty
whenOnlySpec: SPADS auto-restarts for update only when no game is running and battle is empty or only contains spectators
on: SPADS auto-restarts for update when no game is running
-
whenEmpty


[global:autoManagedSpringVersion]
Auto-managed Spring version
-
If this setting is defined, then engine version auto-management is enabled: SPADS automatically downloads and uses engine binaries matching the version/release specified (auto-downloaded binaries are stored in the directory specified by [global:autoManagedSpringDir]).
The desired Spring version can be specified as a version number directly (for example: "103.0.1-1272-g170516f", "103.0" ...), or as a release name ("stable", "testing" or "unstable"). When a version number is used, SPADS will stick to this version until the setting is changed manually. When a release name is used, SPADS will stay up to date with the corresponding official Spring release by automatically downloading and using new Spring binary files when needed (the "stable" release is the current recommended Spring version, the "testing" release is the next Spring release candidate, and the "unstable" release is the latest develop version). A check delay and an auto-restart mode can optionnaly be provided to alter default behaviour (see below).
When Spring version auto-management is enabled, [global:springServerType] must be defined to specify which type of Spring server must be used (dedicated or headless). The auto-managed Spring version setting and the custom Spring installation settings are mutually exclusive: either Spring version auto-management is enabled and the custom Spring installation settings ([global:unitsyncDir] and [global:springServer]) must not be defined, or Spring version auto-management is disabled and the custom Spring installation settings ([global:unitsyncDir] and [global:springServer]) must be defined.
Engine version auto-management can also be enabled for any Spring-based engine whose releases are stored on GitHub. In this case a GitHub-specific prefix must be added to the value described above with following format:
[GITHUB]{owner=<repositoryOwner>,name=<repositoryName>,tag=<releaseTagTemplate>,asset=<assetRegularExpresion>}
  <repositoryOwner> is the name of the GitHub user/organization who owns the repository
  <repositoryName> is the name of the GitHub repository containing the engine releases
  <releaseTagTemplate> is the template of the tags used for the releases. It must contain the "<version>" placeholder indicating where the engine version is located in the tag name, and it can contain the "<branch>" placeholder indicating where the Git branch is located in the tag name (for multi-branch tag templates). Multiple tag templates can be provided by separating them using character "|".
  <assetRegularExpression> is the regular expression used to select the release asset to download and install. This regular expression can contain the "<os>", "<bitness>" and "<arch>" placeholders: "<os>" will be automatically replaced by the current operating system ("linux" or "windows"), "<bitness>" will be replaced by the system bitness ("64" or "32"), and "<arch>" will be replaced by the system architecture ("amd64" or "i386"). Multiple asset regular expressions can be provided by separating them using character "|".
As for official Spring engine, it is possible to select a specific engine version number or an engine release: the "stable" release is the release tagged "Latest" on GitHub, the "testing" release is the most recent release tagged "Pre-release" or "Latest" on GitHub, and the "unstable" release is simply the most recent release available on GitHub (ignoring release tags).
As a special case of engine auto-management from GitHub, it is also possible to use the "[RECOIL]" prefix instead of "[GITHUB]{owner=...}". The "[RECOIL]" prefix is simply a shortcut for "[GITHUB]{owner=beyond-all-reason,name=RecoilEngine,tag=recoil{<branch>}<version>|spring_bar_{<branch>}<version>|<version>,asset=recoil_.+_<arch>-<os>\.7z|.+_<os>-<bitness>-minimal-portable\.7z}".
When using Recoil engine, two additional rolling releases are available for engine auto-management: "bar" and "barTesting", which correspond to the versions used by official "Beyond All Reason" launcher.
-
<null>: Spring version auto-management is disabled (the custom Spring installation specified by [global:unitsyncDir] and [global:springServer] is used instead)
<springVersionNumber>: SPADS auto-downloads Spring binaries for this specific version if needed, and sticks to this version
<springRelease>: SPADS stays up to date with the selected Spring release ("stable", "testing", "unstable")
<springRelease>;<checkDelay>;<autoRestartMode>: same, with customization of check delay and auto-restart mode
    <checkDelay> is the delay in minutes between Spring version checks for selected release (integer). Default is "60" for "stable" Spring release, "30" for "testing" and "15" for "unstable"
    <autoRestartMode> specifies if and when SPADS must auto-restart after Spring release updates, allowed values: "off", "whenEmpty", "whenOnlySpec", "on". Default is "whenEmpty"
[GITHUB]{owner=<repositoryOwner>,name=<repositoryName>,tag=<releaseTagTemplate>,asset=<assetRegularExpresion>}<engineVersionNumberOrRelease>
[RECOIL]<engineVersionNumberOrRelease>
-
%autoManagedSpringVersion% (set during installation)

[global:autoManagedSpringDir]
Auto-managed Spring directory
-
Location of the Spring binary files downloaded automatically by SPADS when Spring version auto-management is enabled (cf [global:autoManagedSpringVersion]). This directory path can be an absolute path or a path relative to [global:varDir] directory.
-
Any writable directory
-
spring

[global:springConfig]
Spring config file path
-
Absolute path of the main Spring configuration file (usually springsettings.cfg).
This setting is not supported by spring-dedicated, it is only usefull when using SPADS with spring-headless.
-
<null>: no configuration file is needed (spring-dedicated case), or default configuration file is used (spring-headless case)
Absolute path to a correct Spring configuration file: configuration file used by spring-headless
-
<null>

[global:springServer]
Spring server path
-
Absolute path of the Spring server binary file. This setting must only be defined when a custom Spring installation is used with SPADS, i.e. when Spring version auto-management is disabled (cf [global:autoManagedSpringVersion]).
-
<null>
Any executable file absolute path
-
%springServer% (set during installation, examples: "/var/home/spring/bin/spring-dedicated", "C:\Program files\Spads\spring-headless.exe")

[global:springServerType]
Spring server type
-
Type of Spring server binary used with SPADS.
This setting must be defined if Spring version auto-management is enabled (cf [global:autoManagedSpringVersion]).
-
<null>: the server type is auto-detected from spring server binary name (see [global:springServer])
dedicated
headless
-
%springServerType% (set during installation, example: "dedicated")

[global:unitsyncDir]
Unitsync library directory
-
Absolute path of the unitsync library directory. This setting must only be defined when a custom Spring installation is used with SPADS, i.e. when Spring version auto-management is disabled (cf [global:autoManagedSpringVersion]).
-
<null>
Any readable directory containing a unitsync library (absolute path)
-
%unitsyncDir% (set during installation, examples: "/usr/local/lib", "C:\Program files\Spring")

[global:springDataDir]
Spring data directories
-
Absolute pathes of the directories containing Spring base files, games or maps.
Directories must be separated by colons (":") on Linux, and by semicolons (";") on Windows.
When Spring version auto-management is enabled (cf [global:autoManagedSpringVersion]), Spring base files are automatically loaded, so only Spring data directories containing games or mods need to be declared here in this case.
-
Any readable directories (absolute pathes)
-
%dataDir% (set during installation, examples: "/share/games/spring", "C:\Program files\Spring")

[global:autoReloadArchivesMinDelay]
Minimum delay before auto-reloading Spring archives
-
SPADS can auto-detect changes in Spring archives, and auto-reload them if needed.
If the autoReloadArchivesMinDelay is set to 0, then this feature is disabled, else it is enabled.
When this feature is enabled, the autoReloadArchivesMinDelay contains the minimum delay in seconds to wait since the last change in Spring archives before reloading them automatically (this is useful to avoid reloading incomplete archives that are still being uploaded for instance).
-
Integer
-
30

[global:sequentialUnitsync]
Sequential unitsync mode
-
Specifies if SPADS must use the unitsync library in sequential mode instead of parallel mode. When using sequential mode, all the SPADS instances with same [global:varDir] will synchronize themselves so that only one instance is calling the unitsync library at a time.
-
0: disabled
1: enabled
-
0

[global:autoLearnMaps]
Automatic map learning
-
Specifies if SPADS must learn automatically all the maps hosted by the other hosts, so that it can host them in ghost-map mode later (without having them locally on the server)
-
0: disabled
1: enabled
-
0

[global:sendRecordPeriod]
Send record period for output flood protection
-
Period in seconds during which data sent to lobby server is measured to avoid flooding it (see also [global:maxBytesSent] and [global:maxLowPrioBytesSent]).
A value of '0' disables output flood protection.
-
Integer
-
10

[global:maxBytesSent]
Max bytes sent to lobby server
-
Amount of bytes that can be sent to lobby server during send record period (see also [global:sendRecordPeriod]).
Output flood protection is performed by queueing excessive data.
-
Integer
-
19000

[global:maxLowPrioBytesSent]
Max low-priority bytes sent to lobby server
-
Amount of low-priority bytes (private messages, command responses...) that can be sent to lobby server during send record period (see also [global:sendRecordPeriod]).
Output flood protection is performed by queueing excessive data in a specific low-priority queue.
-
Any integer smaller than the [global:maxBytesSent] value
-
18000

[global:maxChatMessageLength]
Maximum lobby chat message length
-
Whenever SPADS needs to send a chat message to lobby server, it will first split the message if needed so that each message will have a maximum length of <maxChatMessageLength> bytes.
-
Integer
-
1024

[global:maxAutoHostMsgLength]
Maximum AutoHost message length
-
Whenever SPADS needs to send a message on the AutoHost interface, it will first split the message if needed so that each message will have a maximum length of <maxAutoHostMsgLength> bytes.
-
Integer
-
240

[global:promoteDelay]
Promote delay
-
Minimum delay in seconds between two promote messages (see also [global:promoteChannels])
-
Integer
-
600

[global:msgFloodAutoKick]
Message flood auto-kick thresholds
-
Specifies the record period and the maximum number of chat messages triggered by a user during this period in the battle lobby before auto-kick for flood protection
-
<nbMsg>;<delay>
  where <nbMsg> is the maximum number of chat messages before kick (integer)
        <delay> is the record period in seconds (integer)
-
7;7

[global:statusFloodAutoKick]
Status flood auto-kick thresholds
-
Specifies the record period and the maximum number of status changes triggered by a user during this period in the battle lobby before auto-kick for flood protection
-
<nbMsg>;<delay>
  where <nbMsg> is the maximum number of status changes before kick (integer)
        <delay> is the record period in seconds (integer)
-
8;8

[global:kickFloodAutoBan]
Kick flood auto-ban thresholds
-
Specifies the record period, the maximum number of times someone can be auto-kicked during this period before being auto-banned, and the duration of this automatic ban for battle lobby flood protection
-
<nbAutoKick>;<delay>;<banDuration>
  where <nbAutoKick> is the maximum number of times someone can be auto-kicked before ban (integer)
        <delay> is the record period in seconds (integer)
        <banDuration> is the duration in minutes of the automatic ban for auto-kick floods (integer)
-
2;120;5

[global:cmdFloodAutoIgnore]
Command flood auto-ignore thresholds
-
Specifies the record period, the maximum number of commands someone can send to the AutoHost during this period before being auto-ignored, and the duration of this automatic ignore for command flood protection
-
<nbCmd>;<delay>;<ignoreDuration>
  where <nbCmd> is the maximum number of commands someone can send to the AutoHost before ignore (integer)
        <delay> is the record period in seconds (integer)
        <ignoreDuration> is the duration in minutes of the automatic ignore for command flood (integer)
-
4;4;2

[global:reCallVoteDelay]
Re-call vote delay
-
When a vote ends, SPADS prevents the user who started the vote to call another vote too fast, so that other users have some time to call a vote if they want to (vote flood protection). This is the minimum delay in seconds before someone can call another vote when his previous vote ended.
-
Integer
-
10

[global:floodImmuneLevel]
Flood immune level
-
When a user has an AutoHost access level superior or equal to this value, he is immune to flood protections.
-
Integer
-
100

[global:maxSpecsImmuneLevel]
Spectator limit immune level
-
When a user has an AutoHost access level superior or equal to this value, he is immune to maximum number of spectators limit (refer to [set:maxSpecs]).
-
Integer
-
100

[global:lobbyInterfaceLogLevel]
Lobby interface log level
-
Log level of the lobby interface module
-
0: critical
1: errors
2: warnings
3: notices
4: information
5: debug (all messages sent and received on the interface are logged!)
-
4

[global:autoHostInterfaceLogLevel]
AutoHost interface log level
-
Log level of the AutoHost interface module
-
0: critical
1: errors
2: warnings
3: notices
4: information
5: debug (all messages sent and received on the interface are logged!)
-
4

[global:updaterLogLevel]
Updater log level
-
Log level of the Updater module
-
0: critical
1: errors
2: warnings
3: notices
4: information
5: debug
-
4

[global:spadsLogLevel]
SPADS main log level
-
Log level of the core SPADS component
-
0: critical
1: errors
2: warnings
3: notices
4: information
5: debug
-
4

[global:simpleEventLogLevel]
SimpleEvent log level
-
Log level of the SimpleEvent module
-
0: critical
1: errors
2: warnings
3: notices
4: information
5: debug
-
4

[global:logChanChat]
Log channel chat
-
Specifies if channel chat must be logged
-
0: disabled
1: enabled
-
0

[global:logChanJoinLeave]
Log channel join/leave
-
Specifies if channel join/leave messages must be logged
-
0: disabled
1: enabled
-
0

[global:logBattleChat]
Log battle lobby chat
-
Specifies if battle lobby chat must be logged
-
0: disabled
1: enabled
-
1

[global:logBattleJoinLeave]
Log battle lobby join/leave
-
Specifies if battle lobby join/leave messages must be logged
-
0: disabled
1: enabled
-
1

[global:logGameChat]
Log game chat
-
Specifies if game chat must be logged
-
0: disabled
1: enabled
-
1

[global:logGameJoinLeave]
Log game join/leave
-
Specifies if game join/leave messages must be logged
-
0: disabled
1: enabled
-
1

[global:logGameServerMsg]
Log game server messages
-
Specifies if game server messages must be logged
-
0: disabled
1: enabled
-
1

[global:logPvChat]
Log private lobby messages
-
Specifies if private messages sent to the AutoHost must be logged
-
0: disabled
1: enabled
-
1

[global:alertLevel]
Alert level
-
Minimum AutoHost access level required to receive AutoHost alerts (do not set this too low or you will spam everyone !)
-
Integer
-
130

[global:alertDelay]
Alert delay
-
Delay in hours before re-sending alerts to a user
-
Integer
-
6

[global:alertDuration]
Alert duration
-
After this delay (in hours), alerts are automatically discared. This delay shouldn't be too low because an AutoHost admin could miss alerts if he doesn't connect to lobby server very often.
-
Integer
-
72

[global:masterChannel]
AutoHost master channel
-
If specified, the AutoHost will join this channel and listen to AutoHost commands in it. When running multiple AutoHosts, this can be useful to perform commands on severall AutoHosts at once.
-
<null> (functionality disabled)
Any valid lobby channel name
-
<null>

[global:opOnMasterChannel]
Operator on master channel
-
Specifies if the AutoHost has operator access on the master channel. If so, it will be able to kick players from channel (for banned players or !bKick command)
-
0: no
1: yes
-
0

[global:broadcastChannels]
List of broadcast channels
-
Contains the list of lobby channels in which basic battle status messages are broadcasted.
-
<null> (functionality disabled)
<channel1>[ <password1>][;<channel2>[ <password2>][;...]]
-
<null>

[global:promoteChannels]
List of promote channels
-
Contains the list of lobby channels in which messages to promote current battle will be sent when !promote command is used.
-
<null> (functionality disabled)
<channel1>[ <password1>][;<channel2>[ <password2>][;...]]
-
<null>

[global:promoteMsg]
Promote message
-
Message sent to promote channels when !promote command is used.
%u is replaced by the user performing !promote command
%p is replaced by the number of needed players for current expected battle structure (nbTeams x teamSize x nbPlayerById)
%b is replaced by the battle name
%o is replaced by the mod name
%a is replaced by the map name
%P is replaced by the number of players currently in battle
%S is replaced by the number of spectators currently in battle
%U is replaced by the number of users (players+spectators) currently in battle
-
<null> (functionality disabled)
Any string
-
%pplayer(s) needed for battle "%b" [%o, %a] (%u)

[global:defaultPreset]
Default preset
-
It is the default preset name.
Presets are defined as sections of spads.conf file. The default preset must be complete (i.e. it must define all preset settings)
-
Any complete preset defined in spads.conf
-
default

[global:restoreDefaultPresetDelay]
Default preset restore delay
-
Number of seconds before restoring the default preset when battle is empty. When set to 0, it disables the auto-restore default preset functionality.
-
Integer
-
30

[global:autoLockClients]
Number of clients for auto-lock
-
When this number of clients (players and spectators) is in the battle lobby, SPADS auto-locks the battle.
This is useful when you know your network connection cannot support more than x clients, should they be players or spectators.
This is different from [hSet:maxPlayers], which configures the hosting room capacity regarding number of players only.
This is also different from [set:autoLock], which configures auto-locking based on number of players only.
When set to 0, it disables the auto-lock on client count functionality.
-
Integer
-
64

[global:autoSaveBoxes]
Auto-save start boxes
-
If enabled, SPADS will automatically save the start boxes when a game is launched.
-
0: disabled
1: enabled
2: enabled only if there is no start box saved for this map yet
-
1

[global:botsRank]
Rank for bots
-
This setting defines the rank attibuted to AI bots when auto-balancing the battle.
-
0: Newbie
1: Beginner
2: Average
3: Above average
4: Experienced
5: Highly experienced
6: Veteran
-
3

[global:voteTime]
Vote time
-
When a vote is called, this is the delay in seconds during which clients are allowed to vote.
This global setting can also be overridden individually for each command in the commands rights configuration file (see [set:commandsFile]). The command-specific setting value must be declared at the end of the corresponding command declaration line, in parentheses. If multiple settings are overridden this way for a command, they must be separated by a comma. For example, to use specific values of "voteTime" and "minVoteParticipation" for the "stop" command, the command declaration line could be: "[stop](voteTime:60,minVoteParticipation:75)".
-
Integer
-
45

[global:minVoteParticipation]
Minimum vote participation
-
This is the minimum percent of voters that must have voted manually for a poll to be taken into account by SPADS.
If two values are provided (separated by ";" character), then the first one is used when there is no game in progress and the second one is used when a game is in progress.
This global setting can also be overridden individually for each command in the commands rights configuration file (see [set:commandsFile]). The command-specific setting value must be declared at the end of the corresponding command declaration line, in parentheses. If multiple settings are overridden this way for a command, they must be separated by a comma. For example, to use specific values of "voteTime" and "minVoteParticipation" for the "stop" command, the command declaration line could be: "[stop](voteTime:60,minVoteParticipation:75)".
-
<percent>: Integer between 0 and 100 included (a single value is used, no distinction is made whether a game is running or not)
<percent1>;<percent2>: Integers between 0 and 100 included (<percent1> is used when no game is running, <percent2> is used when a game is running)
-
50

[global:majorityVoteMargin]
Majority vote margin
-
Specifies the percentage of the casted votes required for the vote to pass, in addition to the 50% already required by default.
If set to zero, SPADS will use the standard majority vote system: the vote will pass if more than 50% of the casted votes are "yes".
If not set to zero, SPADS will require supermajority (aka "qualified majority"): the required percentage of the casted votes for the vote to pass will be 50% + the configured value. If set to 50 (maximum value), unanimity will be required for the vote to pass.
This global setting can also be overridden individually for each command in the commands rights configuration file (see [set:commandsFile]). The command-specific setting value must be declared at the end of the corresponding command declaration line, in parentheses. If multiple settings are overridden this way for a command, they must be separated by a comma. For example, to use specific values of "voteTime" and "majorityVoteMargin" for the "stop" command, the command declaration line could be: "[stop](voteTime:60,majorityVoteMargin:25)".
-
Integer between 0 and 50 included
-
0

[global:awayVoteDelay]
Away vote delay
-
Configures the delay to wait before triggering automatic blank votes for players who are in away vote mode (see [pSet:voteMode]). The delay can be expressed as a number of seconds or a percentage of the vote time (see [global:voteTime]).
This global setting can also be overridden individually for each command in the commands rights configuration file (see [set:commandsFile]). The command-specific setting value must be declared at the end of the corresponding command declaration line, in parentheses. If multiple settings are overridden this way for a command, they must be separated by a comma. For example, to use specific values of "voteTime" and "awayVoteDelay" for the "stop" command, the command declaration line could be: "[stop](voteTime:60,awayVoteDelay:50%)".
-
<null>: the away vote mode is disabled
Integer: number of seconds to wait before triggering automatic blank votes
<percent>%: percentage of total vote time to wait before triggering automatic blank votes
-
20

[global:pluginsDir]
SPADS plugins directory
-
Location of SPADS plugins. This directory path can be an absolute path or a path relative to [global:varDir] directory.
-
Any readable directory
-
plugins

[global:autoLoadPlugins]
Auto-loaded plugins
-
Contains the names of the SPADS plugins that will be automatically loaded on start, separated by ';'
-
<null>: no plugin loaded autmatically
<pluginName>[;<pluginName2>[...]]: plugins <pluginName>, <pluginName2>[...] will be automatically loaded on start
-
<null>

[global:springieEmulation]
Springie emulation mode (deprecated)
-
This setting is ignored since SPADS 0.13.39.
-
on
off
warn
-
off

[global:dataDumpDelay]
Data dump delay
-
User preferences and map hashes are stored periodicly into preferences.dat and mapHashes.dat files. This setting defines the delay in minutes between such dumps.
If set to 0, the functionality is disabled (dynamic data are then dumped only when SPADS exits normally)
-
Integer
-
60

[global:allowSettingsShortcut]
Allow settings shortcut
-
If enabled, SPADS will allow clients to use following shortuct commands:
Instead of "!list <dataType>", it is possible to type directly "!<dataType>".
Instead of "!set <settingName> <value>", it is possible to type directly "!<settingName> <value>" (same for "hSet", "bSet" ...).
Instead of "!help set <settingName>", it is possible to type directly "!help <settingName>" (same for "hSet", "bSet" ...).
-
0: disabled
1: enabled
-
1

[global:kickBanDuration]
Ban duration for kickBan command
-
Duration of the ban applied when using !kickBan command (expressed in seconds, or in number of games if the value is suffixed with 'g')
-
<nbOfSeconds>: <nbOfSeconds> is the ban duration expressed in seconds
<nbOfGames>g: <nbOfGames> is the ban duration expressed in number of games
-
300

[global:privacyTrustLevel]
Privacy trust level
-
Specifies the minimum access level required to see personal information about players (IP addresses, non-rounded skill values...) in the output of some commands (!list bans, !searchUser, !smurfs, !status and !whois).
-
Integer
-
130

[global:userDataRetention]
User data retention
-
SPADS can store user data (IP addresses, ranks ...) so that IP bans and anti-smurf are possible.
The "userDataRetention" global setting contains the number of days during which user data are kept even if the user hasn't been seen online, followed by the maximum number of IPs (useful to deal with dynamic IPs) and the maximum number of names (useful to track renames) that can be bound to an account, separated by ";".
-
<retentionPeriod>;<maxIPs>;<maxNames>
  where <retentionPeriod> is the delay in days during which user data are stored ("-1" => data are kept forever, "0" => user data retention disabled)
        <maxIPs> is the maximum number of IPs bound to an account ("-1" => all IPs are kept, "0" => IPs aren't stored)
        <maxNames> is the maximum number of names bound to an account ("-1" => all names are kept, "0" => only one name is stored by account, "1" => max 2 names ...)
-
0;0;0

[global:useWin32Process]
Use Win32 process
-
Specifies if SPADS must use the native process spawning method to launch Spring server on Windows (using Win32 process instead of Perl fork emulation)
-
0: Perl fork implementation is used to spawn Spring server process
1: Win32 process is used to spawn Spring server process (allowed on Windows platform only)
-
0

[global:eventModel]
Event model
-
The "eventModel" global setting specifies which event model must be used by SPADS. SPADS is based on the asynchronous programming paradigm, with events, event handlers, callbacks etc. It can use either its own internal event model, or the Perl AnyEvent module if available on the system.
Compared to the internal event model, AnyEvent is more efficient and makes it possible to integrate a lot of high-performance Perl modules such as web servers directly in the plugins.
The default time slice used for the event loop is 0.5 second. This can be changed by specifying the desired value between parentheses after the event model type (unit is hundredth of second, default value is 50).
-
<eventModelType>
<eventModelType>(<timeSlice>)
Examples:
  "auto": AnyEvent is used if available, otherwise the internal event model is used
  "internal": internal event model is used
  "AnyEvent": AnyEvent is used
  "internal(20)": internal event model is used, with an event loop time slice of 0.2 second instead of default 0.5 second
-
auto

[global:maxChildProcesses]
Maximum number of child processes
-
Specifies how many child processes can be spawned by SPADS simultaneously (other processes are queued). 
-
Integer
-
16

###############################################################################
#           Preset settings (defined in sections of spads.conf file)          #
###############################################################################

[set:description]
Preset description
-
Preset description that appears in "!list presets" output.
This is a special preset setting: it cannot be changed by using !set command.
-
Any String
-
Default SPADS settings

[set:rotationType]
Rotation type
-
SPADS automatic rotation system can occur at the end of each game and/or when the battle is empty (refer to [set:rotationEndGame] and [set:rotationEmpty]).
The "rotationType" preset setting specifies whether map rotation or preset rotation is selected.
When map rotation is selected, a new map is chosen automatically in current map list. A subset of current map list can be specified for map rotation (refer to syntax below)
When preset rotation is selected, a new preset available from current preset is chosen automatically (refer to [set:preset])
-
map: map rotation is selected (any map of current map list can be chosen as next map)
preset: preset rotation is selected (any preset available form current preset can be chosen as next preset)
map;<subMapList>: map rotation with sub map list filter is selected (any map belonging to both current map list and <subMapList> can be chosen as next map)
-
map

[set:rotationDelay]
Rotation delay
-
SPADS automatic rotation system can occur at the end of each game and/or when the battle is empty (refer to [set:rotationEndGame] and [set:rotationEmpty]).
The "rotationDelay" preset setting specifies the minimum delay in seconds between two automatic rotations: it is both the minimum game duration for automatic end-game rotation, and the delay between two automatic rotations when battle is empty.
-
Integer
-
300

[set:rotationEndGame]
End-game rotation mode
-
When a game ends, SPADS can automatically rotate map or preset.
The "rotationEndgame" preset setting specifies if end-game rotation is enabled, and what mode is enabled.
-
off: end-game automatic rotation is disabled
random: end-game automatic rotation is enabled (maps or presets are chosen randomly)
order: end-game automatic rotation is enabled (maps or presets are rotated in order)
-
off

[set:rotationEmpty]
Empty battle rotation mode
-
When the battle lobby is empty, SPADS can automatically rotate map or preset.
The "rotationEmpty" preset setting specifies if empty-battle rotation is enabled, and what mode is enabled.
-
off: empty-battle automatic rotation is disabled
random: empty-battle automatic rotation is enabled (maps or presets are chosen randomly)
order: empty-battle automatic rotation is enabled (maps or presets are rotated in order)
-
random

[set:rotationManual]
Manual rotation mode
-
When using !nextMap or !nextPreset commands, SPADS rotates map or preset.
The "rotationManual" preset setting specifies which rotation mode is used in this case.
-
random: maps or presets are chosen randomly
order: maps or presets are rotated in order
-
random

[set:preset]
Global preset
-
This preset setting contains the name of the current global preset.
This is a special preset setting: it cannot be changed by using !set command (the !preset or !forcePreset commands must be used instead).
The only purpose of this setting is to allow AutoHost administrators to list the other presets users are allowed to switch to.
In spads.conf, the first value of this setting (i.e., the default value) must always be the name of the preset being defined, and the alternate values (separated by '|' character) are the other allowed presets users are allowed to switch to from current preset.
-
Any global preset name (defined in spads.conf)
-
default

[set:hostingPreset]
Hosting preset
-
This preset setting contains the name of the current hosting preset.
This is a special preset setting: it cannot be changed by using !set command (the !hPreset command must be used instead).
In spads.conf, it allows AutoHost administrators to both associate a default hosting preset to the preset being defined, and select which hosting presets users are allowed to switch to.
-
Any hosting preset name (defined in hostingPresets.conf)
-
default

[set:battlePreset]
Battle preset
-
This preset setting contains the name of the current battle preset.
This is a special preset setting: it cannot be changed by using !set command (the !bPreset command must be used instead).
In spads.conf, it allows AutoHost administrators to both associate a default battle preset to the preset being defined, and select which battle presets users are allowed to switch to.
-
Any battle preset name (defined in battlePresets.conf)
-
default

[set:mapList]
Map list
-
Current map list name.
Only the maps included in this map list will be available for "!list maps", !set map", and "!map" commands (and automatic map rotation).
-
Any map list name (defined in mapLists.conf)
-
all

[set:map]
Map name
-
Current map name (default is first map of current map list if not set)
This special preset setting can be changed by using the classic "!set map" command, but also the "!map" alias.
-
<null>
Any map of current map list (defined in mapLists.conf).
-
<null>

[set:autoLoadMapPreset]
Auto-load map preset
-
If enabled, SPADS will automatically load map presets when map is changed. If the corresponding map preset is not found, the default map preset named "_DEFAULT_.smf" is loaded if it exists.
A map preset is a global preset defined in spads.conf which has the same name as a map, with .smf suffix.
Map presets can be useful to automatically adjust allowed team sizes according to the map for instance.
-
0: disabled
1: enabled
-
0

[set:hideMapPresets]
Hide map presets
-
If enabled, map presets will not be shown in "!list presets" output.
A map preset is a global preset defined in spads.conf which has the same name as a map, with .smf suffix.
-
0: disabled
1: enabled
-
0

[set:allowGhostMaps]
Allow ghost maps
-
If enabled and if dedicated Spring server is used (see [global:springServerType]), ghost maps will be available for "!list maps", "!set map", and "!map" commands (and automatic map rotation).
A ghost map is a map which isn't available locally on the server, but whose hash has been learned (refer to [global:autoLearnMaps] and/or "!learnMaps" command). Only the "choose in game" start position type is allowed for such maps.
Like normal maps, ghost maps still have to be included in current map list to be available (refer to [set:mapList]).
-
0: disabled
1: enabled
-
0

[set:autoCallvote]
Auto-call vote
-
When enabled, if a user tries to execute a command directly whereas he only has sufficient rights to call a vote for this command, then SPADS will automaticall call the vote for the user instead of trying to execute the command directly.
-
0: disabled
1: enabled
-
1

[set:autoLockRunningBattle]
Auto-lock running battle
-
When enabled, the battle lobby is automatically locked when a game is running (players won't be able to join the battle lobby when the game is in progress).
-
0: disabled
1: enabled
-
0

[set:autoLock]
Auto-lock mode
-
Specifies if and when battle lobby must be automatically locked/unlocked based on the number of players (this setting is totally independant from [global:autoLockClients], which configures auto-locking based on total number of clients, i.e. players and spectators).
When autoLock is set to "on", the battle lobby is automatically locked when target number of players (1) is reached.
The "advanced" auto-lock mode works in the same way, except that if there are more players than the target number of players (2) and teams cannot be made even (3), then battle lobby is automatically unlocked until enough players join for teams to be made even again.
(1) The target number of players is computed from [set:nbTeams], [set:teamSize], and [set:nbPlayerById] (target number of players = nbTeams * teamSize * nbPlayerById)
(2) This can happen when a spectator unspecs after battle has been automatically locked for instance
(3) i.e. current number of players in battle lobby isn't a multiple of [set:nbTeams]
-
off: auto-lock based on number of players in battle lobby is disabled
on: auto-lock battle lobby when there are enough players
advanced: auto-lock battle lobby when there are enough players and teams can be made even
-
on

[set:autoSpecExtraPlayers]
Auto-spec extra players
-
When enabled, if the target number of players is reached in the battle lobby then SPADS will automatically force spectator mode for next players who join or try to unspec.
The target number of players is computed from [set:nbTeams], [set:teamSize], and [set:nbPlayerById] (target number of players = nbTeams * teamSize * nbPlayerById)
-
0: disabled
1: enabled
-
1

[set:autoBalance]
Auto-balance mode
-
Specifies if and when teams must be automatically balanced.
When autoBalance is set to "on", teams are automatically balanced as soon as all following conditions are fulfilled:
- there are at least [set:minPlayers] players in the battle lobby
- the target number of players (1) is reached
- teams can be made even (2)
The "advanced" auto-balance mode works in the same way, except that it doesn't check if the target number of players is reached. It auto-balances as soon as all other conditions are fulfilled.
(1) The target number of players is computed from [set:nbTeams], [set:teamSize], and [set:nbPlayerById] (target number of players = nbTeams * teamSize * nbPlayerById)
(2) i.e. current number of players in battle lobby is a multiple of [set:nbTeams]
-
off: auto-balance disabled
on: auto-balance enabled
advanced: auto-balance enabled even if target number of players isn't reached
-
advanced

[set:autoFixColors]
Auto-fix colors mode
-
Specifies if and when player colors must be automatically fixed.
When autoFixColors is set to "on", player colors are automatically fixed as soon as all following conditions are fulfilled:
- there are at least [set:minPlayers] players in the battle lobby
- the target number of players (1) is reached
- teams can be made even (2)
The "advanced" auto-fix colors mode works in the same way, except that it doesn't check if the target number of players is reached. It auto-fixes colors as soon as all other conditions are fulfilled.
(1) The target number of players is computed from [set:nbTeams], [set:teamSize], and [set:nbPlayerById] (target number of players = nbTeams * teamSize * nbPlayerById)
(2) i.e. current number of players in battle lobby is a multiple of [set:nbTeams]
-
off: auto-fix colors disabled
on: auto-fix colors enabled
advanced: auto-fix colors enabled even if target number of players isn't reached
-
advanced

[set:autoBlockBalance]
Auto-block balance
-
If enabled, SPADS will prevent players from changing their ID/team once teams have been balanced.
-
0: disabled
1: enabled
-
1

[set:autoBlockColors]
Auto-block colors
-
If enabled, SPADS will prevent players from changing their color once colors have been fixed.
-
0: disabled
1: enabled
-
0

[set:autoStart]
Auto-start mode
-
Specifies if and when game must be automatically started.
When autoStart is set to "on", the game is automatically started as soon as all following conditions are fulfilled:
- there are at least [set:minPlayers] players in the battle lobby
- the target number of players (1) is reached
- teams are even
- no AI bot is enabled
- all players are ready and synced, and no player is in-game
The "advanced" auto-start mode works in the same way, except that it doesn't check if the target number of players is reached. It auto-starts as soon as all other conditions are fulfilled.
(1) The target number of players is computed from [set:nbTeams], [set:teamSize], and [set:nbPlayerById] (target number of players = nbTeams * teamSize * nbPlayerById)
-
off: auto-start disabled
on: auto-start enabled
advanced: auto-start enabled even if target number of players isn't reached
-
on

[set:autoStop]
Auto-stop mode
-
Specifies if and when game must be automatically stopped, with a configurable delay.
-
noOpponent: game is auto-stopped when game is over or when there is only one team with connected alive player(s) (delay: 5 seconds)
noOpponent(<delay>): game is auto-stopped when game is over or when there is only one team with connected alive player(s) (delay: <delay> seconds)
onlySpec: game is auto-stopped when game is over or when only spectators are still connected (delay: 5 seconds)
onlySpec(<delay>): game is auto-stopped when game is over or when only spectators are still connected (delay: <delay> seconds)
gameOver: game is auto-stopped when game is over only (delay: 5 seconds)
gameOver(<delay>): game is auto-stopped when game is over only (delay: <delay> seconds)
off: game is not auto-stopped by AutoHost
-
gameOver

[set:colorSensitivity]
Color sensitivity
-
When auto-fixing players colors, SPADS uses a formula to evaluate how much different 2 colors are.
If the computed color difference is below the value of this setting, SPADS tries to change the offending colors.
Using a very low value for this setting would allow players to use very similar colors.
Using a very high value for this setting would change players colors almost every time, even if they seem really different.
If set to 0, players colors are always forced using hard-coded colors (players can't choose their colors)
If set to -1, players colors are always forced using an advanced color assignment algorithm, taking game mode and battle structure into account (players can't choose their colors)
-
Positive integer: players colors are automatically changed if too similar
0: players colors are always forced using hard-coded values
-1: players colors are always forced using an advanced color assignment algorithm
-
55 (some colors may seem similar in battle lobby, but usually they are different enough in game)

[set:balanceMode]
Balance mode
-
This is the balance mode used during both automatic (refer to [set:autoBalance]) and manual (refer to "!balance" command) team balancing operations.
Four balance modes are currently available:
The "random" balance mode simply balances players randomly.
The "clan;random" balance mode ensures players of the same clans (refer to [set:clanMode]) are in the same teams. Other players are balanced randomly.
The "skill" balance mode tries to balance teams according to player skills (refer to [pSet:skillMode] and [pSet:rankMode]), without respecting clans.
The "clan;skill" balance mode tries to balance teams according to player skills (refer to [pSet:skillMode] and [pSet:rankMode]), respecting clans (refer to [set:clanMode]).
-
random: balance players randomly, without respecting clans
clan;random: balance players randomly, respecting clans
skill: balance players according to their skill, without respecting clans
clan;skill: balance players according to their skill, respecting clans
-
clan;skill

[set:clanMode]
Clan mode
-
This is the clan mode used during balancing operations if [set:balanceMode] is set to "clan" or "clan;skill".
It determines how players are recognized as being in the same clan.
If [set:balanceMode] is set to "clan;skill" and maximum unbalance is specified (see below), it also determines how much unbalance implied by clans is allowed. Unbalance is measured as the relative percent difference of the standard deviation of estimated team skills between optimal balance (without clan management) and requested balance. If <maxUnbalance> cannot be honored, then clans aren't taken into account for balancing.
-
tag: players are considered as being in the same clan only if they have same tag in their names
tag(<maxUnbalance>): same, except clans are only taken into account if <maxUnbalance> (integer) can be honored when balancing
pref: players are considered as being in the same clan only if they have same [pSet:clan] value
pref(<maxUnbalance>): same, except clans are only taken into account if <maxUnbalance> can be honored when balancing
tag(<maxUnbalance1>);pref(<maxUnbalance2>): SPADS tries to balance by clan tag respecting <maxUnbalance1>. If it succeeds, then it also tries to handle [pSet:clan] values respecting <maxUnbalance2> (<maxUnbalance1> and/or <maxUnbalance2> can be omitted to remove balance constraint(s))
pref(<maxUnbalance1>);tag(<maxUnbalance2>): same, except it tries to respect [pSet:clan] values before clan tags
-
tag;pref(5)

[set:nbPlayerById]
Number of player by ID
-
Spring engine supports having multiple players controling the same units. The "nbPlayerById" preset setting specifies the target number of players controling the same units (i.e., sharing the same ID).
This is one of the three preset settings used by SPADS to determine the target battle structure (for battle auto-management in particular):
- [set:nbTeams] (number of teams in the game)
- [set:teamSize] (number of ID by team)
- [set:nbPlayerById] (number of player by ID)
-
Non-null integer
-
1

[set:teamSize]
Team size
-
Target size of each team (number of ID by team).
This is one of the three preset settings used by SPADS to determine the target battle structure (for battle auto-management in particular):
- [set:nbTeams] (number of teams in the game)
- [set:teamSize] (number of ID by team)
- [set:nbPlayerById] (number of player by ID)
-
Non-null integer
-
6

[set:nbTeams]
Number of teams
-
Target number of teams
This is one of the three preset settings used by SPADS to determine the target battle structure (for battle auto-management in particular):
- [set:nbTeams] (number of teams in the game)
- [set:teamSize] (number of ID by team)
- [set:nbPlayerById] (number of player by ID)
If nbTeams is set to 1, then SPADS will put all human players in team 1, and all bots in team 2. This special mode is usefull for "humans vs bots" type of games (chickens...)
-
Non-null integer
-
2

[set:minTeamSize]
Minimum team size
-
When auto-balancing, normaly [set:nbTeams] has higher priority than [set:teamSize], which means that if there aren't enough players to reach target battle structure, SPADS will try to put at least one player in each team before adding players to existing teams.
[set:minTeamSize] makes it possible to alter this behaviour: it specifies the minimum team size before starting to fill another team when auto-balancing. This is only useful for TeamFFA, when there aren't enough players to fulfill target battle structure: it makes SPADS decrease the number of teams so that there are at least this number of people in each team.
If minTeamSize is set to 0, it simply makes [set:teamSize] have higher priority than [set:nbTeams] (it acts as if [set:minTeamSize] had same value as [set:teamSize]).
-
Integer
-
1

[set:extraBox]
Extra box
-
Specifies the number of extra map boxes required by current game, in addition to the normal start boxes.
Extra boxes are special boxes required by some specific game modes such as King Of The Hill. Contrary to normal start boxes, extra boxes are not used to specify a team start location. Instead, they are used to give special meanings to specific map locations.
SPADS uses this setting to manage totally independent groups of saved map boxes (one for each value of the extraBox setting).
-
Integer
-
0

[set:idShareMode]
ID share mode
-
Specifies how SPADS chooses which players are sharing IDs.
-
all: all players of each team are sharing ID (SPADS counts the number of players in each team to know if teams are even)
auto: [set:nbPlayerById] and [set:balanceMode] are used to determine shared IDs (SPADS counts the number of IDs in each team to know if teams are even)
manual: [pSet:shareId] (coop group) is used to determine shared IDs (SPADS counts the number of players in each team to know if teams are even)
clan: same as "manual", except that the clan tag is used as default [pSet:shareId] (coop group) value for clan players
off: ID sharing is disabled (SPADS counts the number of players in each team to know if teams are even)
-
auto

[set:minPlayers]
Minimum number of players
-
This is the minimum number of players to start a game without using "!forceStart" command.
Battle auto-management isn't performed when there is less players (refer to [set:autoStart], [set:autoBalance] and [set:autoFixColors]).
-
Integer
-
2

[set:endGameCommand]
End game command
-
Specifies a shell command to execute each time a game ends.
This is a special preset setting: it cannot be changed by using !set command and it is not shown in "!list settings".
Following placeholders can be used as command parameters:
%startTimestamp: server start timestamp (example: '1339938200')
%endTimestamp: server stop timestamp (example: '1339939006')
%duration: server running time in seconds (example: '806')
%startPlayingTimestamp: game start timestamp (example: '1339938300')
%endPlayingTimestamp: game over timestamp (example: '1339939000')
%gameDuration: game duration in seconds (example: '700')
%engineVersion: engine major version (example: '89')
%mod: mod name (example: 'Balanced Annihilation V7.68')
%map: map name (example: 'DeltaSiegeDry')
%type: game type ('Solo','Duel','FFA','Team','TeamFFA')
%structure: structure of the game (examples: '1', '1v1','8-way','8v8','3v3v3')
%nbBots: number of AI bots (example: '0')
%ahName: autohost name (example: 'Spads4')
%ahAccountId: autohost account ID (example: '77888')
%ahPassword: autohost lobby password (example: 'abcd')
%ahPassHash: autohost hashed lobby password, as sent to lobby server on login (example: 'ahdPrHyuJJfsPj+bZE+nrw==')
%demoFile: absolute path to the game replay file (example: '/home/spring/demos/20120617_143502_DeltaSiegeDry_88.sdf')
%gameId: game hash uniquely identifying the game, as generated by Spring on startup (example: 'c7c6dc4f79cd4f3cfb8fc1a397174d8b')
%result: end game result ('gameOver','undecided')
%cheating: indicates if cheats have been enabled during game ('0': cheats disabled, '1': cheats enabled)
-
<null> (functionality disabled)
Valid shell command
-
<null>

[set:endGameCommandEnv]
End game command environment variables
-
Specifies the environment variables to define before launching the end game command (refer to [set:endGameCommand])
This is a special preset setting: it cannot be changed by using !set command and it is not shown in "!list settings".
Following placeholders can be used in the environment variables values:
%startTimestamp: server start timestamp (example: '1339938200')
%endTimestamp: server stop timestamp (example: '1339939006')
%duration: server running time in seconds (example: '806')
%startPlayingTimestamp: game start timestamp (example: '1339938300')
%endPlayingTimestamp: game over timestamp (example: '1339939000')
%gameDuration: game duration in seconds (example: '700')
%engineVersion: engine major version (example: '89')
%mod: mod name (example: 'Balanced Annihilation V7.68')
%map: map name (example: 'DeltaSiegeDry')
%type: game type ('Solo','Duel','FFA','Team','TeamFFA')
%structure: structure of the game (examples: '1', '1v1','8-way','8v8','3v3v3')
%nbBots: number of AI bots (example: '0')
%ahName: autohost name (example: 'Spads4')
%ahAccountId: autohost account ID (example: '77888')
%ahPassword: autohost lobby password (example: 'abcd')
%ahPassHash: autohost hashed lobby password, as sent to lobby server on login (example: 'ahdPrHyuJJfsPj+bZE+nrw==')
%demoFile: absolute path to the game replay file (example: '/home/spring/demos/20120617_143502_DeltaSiegeDry_88.sdf')
%gameId: game hash uniquely identifying the game, as generated by Spring on startup (example: 'c7c6dc4f79cd4f3cfb8fc1a397174d8b')
%result: end game result ('gameOver','undecided')
%cheating: indicates if cheats have been enabled during game ('0': cheats disabled, '1': cheats enabled)
-
<null> (functionality disabled)
Variables assignments, separated by ';'
-
<null>

[set:endGameCommandMsg]
End game command messages
-
Specifies the messages sent to battle lobby when the end-game command ends (refer to [set:endGameCommand]).
Lines are separated by "|", and optionally prefixed by "(<exitCodeRange>)" (in this case they are only printed if the end-game command exit code matches).
This is a special preset setting: it cannot be changed by using !set command and it is not shown in "!list settings".
Following placeholders can be used in the messages:
%engineVersion: engine major version (example: '89')
%mod: mod name, URL encoded (example: 'Balanced%20Annihilation%20V7.68')
%map: map name, URL encoded (example: 'Comet%20Catcher%20Redux')
%type: game type ('Solo','Duel','FFA','Team','TeamFFA')
%ahName: autohost name (example: 'Spads4')
%ahAccountId: autohost account ID (example: '77888')
%demoName: game replay file name, without path and URL encoded (example: '20120617_143502_Comet%20Catcher%20Redux_89.sdf')
%gameId: game hash uniquely identifying the game, as generated by Spring on startup (example: 'c7c6dc4f79cd4f3cfb8fc1a397174d8b')
%result: end game result ('gameOver','undecided')
-
<null> (functionality disabled)
[(<exitCodeRange1>)]<message1>[|[(<exitCodeRange2>)]<message2>[|...]]
-
<null>


[set:endGameAwards]
End game awards
-
Specifies if award messages based on team statistics must be printed after each game
-
0: award messages disabled
1: award messages enabled except for 1v1
2: award messages enabled for all games
-
1

[set:speedControl]
Auto adjust game speed
-
Specifies how the game speed must be auto-adjusted according to current players CPU usages.
-
1: use average CPU usage to auto-adjust game speed (this setting will drop players having slow CPUs if they are slowing the game)
2: use maximum CPU usage to auto-adjust game speed (this setting will slow the game to allow players having slow CPUs to catch up)
-
2

[set:maxBots]
Maximum number of AI bots
-
When this number of AI bots are in the battle lobby, SPADS will auto-kick any additional AI bot added.
A value of 0 will prevent anyone from adding an AI bot.
-
Integer
-
8

[set:maxRemoteBots]
Maximum number of remote AI bots
-
When this number of remote AI bots (bots hosted by players) are in the battle lobby, SPADS will auto-kick any additional remote AI bot added.
A value of 0 will prevent anyone from adding a remote AI bot.
-
Integer
-
8

[set:maxLocalBots]
Maximum number of local AI bots
-
When this number of local AI bots (bots hosted at server side) are in the battle lobby, SPADS will auto-kick any additional local AI bot added.
A value of 0 will prevent anyone from adding a local AI bot.
-
Integer
-
8

[set:autoAddBotNb]
Auto-add bot number
-
This number is used by SPADS to determine the number of local bots to add/remove automatically, according to following rules:
- If "humans vs bots" mode is selected (i.e., [set:nbTeams] is set to 1), then "autoAddBotNb" is the total number of bots which must be in the bot team.
- Else if FFA mode is selected (i.e., [set:teamSize] is set to 1), then "autoAddBotNb" is the minimum number of players or bots to maintain in the battle room
- Else if TeamFFA mode is selected (i.e., [set:minTeamSize] is different than 1), then "autoAddBotNb" is the minimum number of teams to fill with [set:minTeamSize] (or [set:teamSize] if [set:minTeamSize] is 0) players and bots
- Else, "autoAddBotNb" is the minimum number of players or bots to maintain in each team
Auto added bots are taken from [set:localBots] and always obey the [set:maxLocalBots] and [set:maxBots] limits.
(local bots require Spring headless, see [global:springServerType])
-
Integer
-
0

[set:localBots]
Local bots
-
This is the list of predefined local bots. Automatically added bots are taken from this list (see [set:autoAddBotNb]).
-
[<name> <side>[#<rgbColor>] <ai>[;<name2> <side2>[#<rgbColor2>] <ai2>[...]]]
  where <name> is the name of the bot (string, example: "joe")
        <side> is the faction of the bot (can be the faction number or the faction name)
        <rgbColor> is the default color of the bot in hexadecimal RGB format (example: "FF0000" for red)
        <ai> is the exact name of the AI used by the bot (string, example: "E323AI")
-
joe 0 E323AI;jim core#FF0000 KAIK

[set:allowedLocalAIs]
Allowed local AIs
-
This is the list of allowed AIs for local bots. Only these AIs are allowed for !addbot command.
(local bots require Spring headless, see [global:springServerType])
-
[<ai>[;<ai2>...]]
  where <ai> is the exact name of the AI (example: "Chicken: Normal")
-
E323AI;HughAI;KAIK;RAI

[set:maxSpecs]
Maximum number of spectators
-
When this number of spectators are in the battle lobby, SPADS will auto-kick any additional player who joins as spectator.
A value of 0 will prevent anyone from spectating.
-
<null> (no spectator number limit)
Integer
-
<null>

[set:autoSetVoteMode]
Default value of "Auto-set vote mode" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:autoSetVoteMode] for more information.
-
0: disabled
1: enabled
-
1

[set:voteMode]
Default value of "Vote mode" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:voteMode] for more information.
-
normal: normal vote mode
away: away vote mode
-
normal

[set:votePvMsgDelay]
Default value of "Vote auto-private message delay" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:votePvMsgDelay] for more information.
-
Integer
-
0

[set:voteRingDelay]
Default value of "Vote auto-ring delay" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:voteRingDelay] for more information.
-
Integer
-
0

[set:minRingDelay]
Default value of "Minimum ring delay" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:minRingDelay] for more information.
-
Integer
-
20

[set:handleSuggestions]
Default value of "Handle suggestions" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:handleSuggestions] for more information.
-
0: disabled
1: enabled
-
0

[set:ircColors]
Default value of "Use IRC colors" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:ircColors] for more information.
-
0: disabled
1: enabled
-
0

[set:spoofProtection]
Default value of "Spoof protection" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:spoofProtection] for more information.
-
on
off
warn
-
warn

[set:rankMode]
Default value of "Rank mode" preference
-
This is the default value for the preference with same name (this value is used when the user's rankMode hasn't been set with !chrank command).
Refer to [pSet:rankMode] for more information.
-
account
ip
0
1
2
3
4
5
6
-
account

[set:skillMode]
Default value of "Skill mode" preference
-
This is the default value for the preference with same name (this value is used when the user's skillMode hasn't been set with !chskill command).
Refer to [pSet:skillMode] for more information.
-
rank
TrueSkill
-
rank

[set:shareId]
Default value of "Share ID (coop group)" preference
-
This is the default value for the preference with same name (this value is used when a user hasn't set his preference).
Refer to [pSet:shareId] for more information.
-
<null>
Any string
-
<null>

[set:banList]
Ban list
-
Current active ban list name, as defined in the banLists.conf file.
-
Any string
-
empty

[set:commandsFile]
Commands file
-
Name of the commands rights configuration file.
This is a special preset setting: it cannot be changed by using !set command.
-
Any readable file in [global:etcDir]
-
commands.conf

[set:freeSettings]
Free settings
-
Contains the list of preset settings (and optionnaly their values) that can be changed directly by players without having to call a vote, provided the players have sufficient rights to call a vote for the !set command. In other words, if a player has sufficient rights to call a vote to change the setting, then he can change it directly.
-
List of preset settings, separated by ";"
Optional value restrictions can be added for each setting, inside parentheses and separated by "," (ranges can be used for numbers)
-
autoLock;teamSize(1-6);balanceMode

[set:allowModOptionsValues]
Allow mod options values
-
When a mod option isn't defined in current battle preset, it takes the default value provided by the mod. The other allowed values for such a mod option depend on the "allowModOptionsValues" preset setting:
If disabled, the mod options that aren't defined in current battle preset cannot be modified.
If enabled, the mod options that aren't defined in current battle preset can take the allowed values provided by the mod.
-
0: disabled
1: enabled
-
1

[set:allowMapOptionsValues]
Allow map options values
-
When a map option isn't defined in current battle preset, it takes the default value provided by the map. The other allowed values for such a map option depend on the "allowMapOptionsValues" preset setting:
If disabled, the map options that aren't defined in current battle preset cannot be modified.
If enabled, the map options that aren't defined in current battle preset can take the allowed values provided by the map.
-
0: disabled
1: enabled
-
1

[set:unlockSpecDelay]
Unlock-for-spectator delay
-
The !unlockSpec command allows players to unlock temporarily a battle so that they can join as spectator: the battle is unlocked and re-locked automatically as soon as they join it.
The "unlockSpecDelay" preset setting specifies both the maximum delay during which battle is unlocked to allow the spectator to join (if he didn't join during this time, the battle is re-locked anyway to prevent other players to join and think they can play), and the minimum delay before the same user can execute the !unlockSpec command another time.
-
<unlockTime>;<delayForRetry>
  where <unlockTime> is the maximum delay in seconds during which battle is unlocked to allow the spectator to join
        <delayForRetry> is the minimum delay in seconds before the same user can execute the !unlockSpec command another time
-
2;30

[set:midGameSpecLevel]
Minimum access level for midgame join as spectator
-
When a user has an AutoHost access level superior or equal to this value, he is allowed to join a game in progress as spectator directly (without using !joinAs command) even if he wasn't in the battleroom when the game started.
-
Integer
-
0

[set:forwardLobbyToGame]
Forward lobby chat to game
-
If enabled, chat messages in battle lobby are automatically forwarded to game.
If disabled, players have to use the !say command to forward messages to game.
Note: In-game messages are always forwarded to battle lobby (except team messages, spectator messages and whispered messages)
-
0: disabled
1: enabled
-
1

[set:noSpecChat]
No spectator chat
-
If enabled, spectators can only chat with other spectators in game
-
0: disabled
1: enabled
-
0

[set:noSpecDraw]
No spectator draw
-
If enabled, drawing ability is disabled for spectators
-
0: disabled
1: enabled
-
0

[set:welcomeMsg]
Welcome message
-
Message sent to battle lobby when a player joins the battle (lines are separated by character '|').
Lines prefixed with '!' are only sent to the user joining the battle (only supported by uberserver).
%u is replaced by the user joining the battle
%l is replaced by the user access level
%d is replaced by the description of the user access level
%m is replaced by the map name (with spaces replaced by "%20" so that it can be used in url)
%n is replaced by the lobby name of the AutoHost
%v is replaced by SPADS main version number
%h is replaced by the unsigned map hash
%a is replaced by the map link as specified by [set:mapLink] or [set:ghostMapLink]
%t is replaced by the time elapsed since last game start
%p is replaced by the currently active global preset
%P is replaced by the description of the currently active global preset
This is a special preset setting: it cannot be changed by using !set command.
-
<null> (no welcome message)
Any string
-
Hi %u (%d), welcome to %n (SPADS %v, automated host).|!For help, say "!help". Map link: %a

[set:welcomeMsgInGame]
Welcome message when game is running
-
Message sent to battle lobby when a player joins the battle while game is running (lines are separated by character '|').
Lines prefixed with '!' are only sent to the user joining the battle (only supported by uberserver).
%u is replaced by the user joining the battle
%l is replaced by the user access level
%d is replaced by the description of the user access level
%m is replaced by the map name (with spaces replaced by "%20" so that it can be used in url)
%n is replaced by the lobby name of the AutoHost
%v is replaced by SPADS main version number
%h is replaced by the unsigned map hash
%a is replaced by the map link as specified by [set:mapLink] or [set:ghostMapLink]
%t is replaced by the duration of current game in progress
%p is replaced by the currently active global preset
%P is replaced by the description of the currently active global preset
This is a special preset setting: it cannot be changed by using !set command.
-
<null> (no welcome message)
Any string
-
Hi %u (%d), welcome to %n (SPADS %v, automated host).|!A game is in progress since %t.|!Say "!status" for more information, and "!notify" to be notified when this game ends.

[set:mapLink]
Map link
-
Defines the map link which is used to build welcome messages (refer to [set:welcomeMsg] and [set:welcomeMsgInGame]) and !mapLink command answer, when current map is a local map (refer to [set:ghostMapLink] for ghost map case).
%m is replaced by the map name (with spaces replaced by "%20" so that it can be used in url)
%M is replaced by the map archive (with spaces replaced by "%20" so that it can be used in url)
%h is replaced by the unsigned map hash
This is a special preset setting: it cannot be changed by using !set command.
-
<null> (no map link, !mapLink command disabled)
Any string
-
https://springfiles.springrts.com/index.html?type=1&filter=%m&category=map

[set:ghostMapLink]
Ghost map link
-
Defines the map link which is used to build welcome messages (refer to [set:welcomeMsg] and [set:welcomeMsgInGame]) and !mapLink command answer, when current map is a ghost map (refer to [set:mapLink] for local map case).
%m is replaced by the map name (with spaces replaced by "%20" so that it can be used in url)
%h is replaced by the unsigned map hash
This is a special preset setting: it cannot be changed by using !set command.
-
<null> (no map link, !mapLink command disabled)
Any string
-
https://springfiles.springrts.com/index.html?type=1&filter=%m&category=map

[set:advertDelay]
Advert delay
-
Delay in minutes between automatic advert messages (refer to [set:advertMsg]).
A value of 0 disables advert system.
-
Integer
-
15

[set:advertMsg]
Advert message
-
Message sent to battle lobby every [set:advertDelay] minutes (lines are separated by character '|').
Advert messages aren't sent when a game is in progress or when noone is in battle lobby.
This is a special preset setting: it cannot be changed using !set command, you have to use the !advert command instead.
-
<null> (functionality disabled)
Any string
-
<null>

###############################################################################
#            Hosting settings (defined in hostingPresets.conf file)           #
###############################################################################

[hSet:description]
Hosting preset description
-
Hosting preset description that appears in "!list hPresets" output.
This is a special hosting preset setting: it cannot be changed by using !hSet command.
-
Any String
-
Default hosting settings

[hSet:battleName]
Battle name
-
Name of the auto-hosted battle, as shown in the battle list at client side.
-
Any string
-
SPADS (default settings)

[hSet:modName]
Mod name
-
Name of the hosted game, including version (aka "primary mod name" in unitsync library).
The corresponding game archives must be available locally in the "games" or "packages" subdirectories of [set:springDataDir].
A regular expression can be used instead of the exact game version name, by prefixing the value with "~". SPADS will then choose the latest game in lexicographic order whose name matches the regular expression, which should automatically select the latest game version.
It is also possible to use a rapid tag instead of a specific game name, by prefixing the value with "rapid://". In this case SPADS will use the local rapid repository to resolve the rapid tag to a specific game version (warning: this means the local rapid repository must always be in a state where the game version associated with the rapid tag used by SPADS is available locally, i.e. all update operations of the local rapid repository must include the retrieval of the rapid tag used by SPADS).
-
<modName>: exact game name, including version (as expected by the unitsync library)
~<regularExpression>: automatic selection of the latest game name matching the regular expression
rapid://<rapidTag>: automatic resolution of the rapid tag from local rapid repository
-
%modName% (set during installation, example: "~Balanced Annihilation V\d+\.\d+")

[hSet:maxPlayers]
Maximum number of players
-
Maximum number of players that can be in the battle lobby at the same time. Any additional player joining the battle will be automatically forced to spectate by the lobby server.
-
Any integer between 2 and 251 included
-
16

[hSet:minRank]
Minimum rank
-
Rank requirement for battle, as shown in the battle list at client side. The only purpose of this hosting setting is to select the rank requirement seen by players, it doesn't actually apply any real rank limit. If you want to apply effective rank limits, you have to use ban lists (refer to [set:banList]), with ban filters based on rank.
-
0: Newbie (no rank requirement)
1: Beginner
2: Average
3: Above average
4: Experienced
5: Highly experienced
6: Veteran
-
0

[hSet:natType]
NAT type
-
NAT traversal method used by the host.
-
0: No NAT traversal technique is applied
1: The "hole punching" NAT traversal method is used
2: The "fixed source ports" NAT traversal method is used
-
0

[hSet:password]
Battle password
-
This hosting setting specifies if the AutoHost must open a public battle, or a private passworded battle.
-
*: No password (public battle)
Any other string: String used as password (private battle)
-
*

[hSet:port]
Spring server port
-
UDP port on which Spring server will listen for Spring client connections
-
Any valid port number
-
8452

###############################################################################
#             Battle settings (defined in battlePresets.conf file)            #
###############################################################################

[bSet:description]
Battle preset description
-
Battle preset description that appears in "!list bPresets" output.
This is a special battle preset setting: it cannot be changed by using !bSet command.
-
Any String
-
Default battle settings

[bSet:resetoptions]
Reset mod/map options
-
If enabled, all mod options and map options are reset to their default values for current mod and map before loading the battle preset.
This is a special battle preset setting: it is only used when the battle preset is loaded and it cannot be changed by using !bSet command.
-
0: disabled
1: enabled
-
1

[bSet:disabledunits]
Disabled units
-
This battle setting contains the list of changes to operate on current disabled units list when the battle preset is loaded.
This is a special battle preset setting: it is only used when the battle preset is loaded and it cannot be changed by using !bSet command.
-
<null>: no change is made to current disabled units
<disabledUnitData1>[;<diabledUnitData2>[;...]]: each <disabledUnitData> is processed in order. <disabledUnitData> can take following values:
  -*: remove all disabled units
  -<internalUnitIdentifier>: remove unit identified by <internalUnitIdentifier> from the list of disabled units
  <internalUnitIdentifier>: add unit identified by <internalUnitIdentifier> to the list of disabled units
-
-*

[bSet:startpostype]
Start position type
-
Determines how start positions are affected to players
-
0: Fixed (Fixed start positions of the map are used in ascending order)
1: Random (Fixed start positions of the map are used in random order)
2: Choose in game (Start positions are chosen by players in game)
-
2

###############################################################################
#                              User preferences                               #
###############################################################################


[pSet:autoSetVoteMode]
Auto-set vote mode
-
If enabled, SPADS will automatically set your "voteMode" preference (refer to [pSet:voteMode]) according to following rules:
If a vote has been called and you didn't vote before it expired, then your "voteMode" preference is set to "away".
If you vote while your "voteMode" preference is set to "away", then your "voteMode" preference is set back to "normal".
-
0: disabled
1: enabled
-
1

[pSet:voteMode]
Vote mode
-
When a vote is called and your vote mode is set to "away", SPADS will only wait for your vote for the time configured by [global:awayVoteDelay]. When this delay has expired, SPADS will automatically vote blank for you. But you can still cancel this blank vote by voting before the called vote expires (refer to [global:voteTime]).
When your vote mode is set to "normal", SPADS will wait for your vote until the called vote passes, fails, or expires.
-
normal: normal vote mode
away: away vote mode
-
normal

[pSet:votePvMsgDelay]
Vote auto-private message delay
-
Delay in seconds before which SPADS will automatically send you a private message if a vote has been called and you didn't vote yet.
A value of 0 disables this functionality.
-
Integer
-
0

[pSet:voteRingDelay]
Vote auto-ring delay
-
Delay in seconds before which SPADS will automatically ring you if a vote has been called and you didn't vote yet.
A value of 0 disables this functionality.
-
Integer
-
0

[pSet:minRingDelay]
Minimum ring delay
-
This preference sets your ring flood protection: it is the minimum delay in seconds SPADS must wait before ringing you another time.
-
Integer
-
20

[pSet:handleSuggestions]
Handle suggestions
-
If enabled, SPADS will process your suggestions (performed through TASClient or SpringLobby GUI), else it will ignore them.
-
0: disabled
1: enabled
-
0

[pset:ircColors]
Use IRC colors
-
If enabled, SPADS will use IRC style colors to improve output format of some commands (not supported by TASClient).
-
0: disabled
1: enabled
-
0

[pSet:spoofProtection]
Spoof protection
-
When spoof protection preference is enabled, SPADS checks that the in-game IP address of the user matches his IP address in lobby. If they don't match, SPADS can auto-kick the player from game, or print a warning message. Spoof protection may produce false positives (if a proxy is used to connect to lobby server for instance).
-
on: spoof protection is fully enabled, player is auto-kicked from game if IP addresses don't match
off: spoof protection is disabled
warn: spoof protection is partially enabled, a warning is printed if IP addresses don't match
-
warn

[pSet:password]
Account password
-
When Spring lobby server is running in LAN mode, lobby accounts aren't authenticated. In this case, SPADS doesn't trust players identity and requires them to authentify by using the "!auth" command to gain their privileged access.
The password provided as "!auth" command parameter must be the "password" preference value.
-
<null>
Any string: String used as password
-
<null>

[pSet:rankMode]
Rank mode
-
Specifies which rank must be used for the user when auto-balancing teams (if [pSet:skillMode] is set to "rank").
This is a special preference, it cannot be set by the user himself with "!pSet" command, it must be set by an AutoHost privileged user with "!chrank" command.
When set to "account" the user's rank in Spring lobby is used.
When set to "ip", the best known rank for any account seen using current user's IP is used (AutoHost user data retention must be enabled, lobby rank is used as fallback if user's IP is unknown)
When set to an integer, the corresponding rank is used for auto-balancing, overriding user's lobby rank.
-
account: lobby rank is used
ip: best rank seen for this IP is used
0: "Newbie" rank is used, overriding user's rank in lobby
1: "Beginner" rank is used, overriding user's rank in lobby
2: "Average" rank is used, overriding user's rank in lobby
3: "Above" average rank is used, overriding user's rank in lobby
4: "Experienced" rank is used, overriding user's rank in lobby
5: "Highly" experienced rank is used, overriding user's rank in lobby
6: "Veteran" rank is used, overriding user's rank in lobby
-
account

[pSet:skillMode]
Skill mode
-
Specifies how the player's skill is estimated when auto-balancing teams.
This is a special preference, it cannot be set by the user himself with "!pSet" command, it must be set by an AutoHost privileged user with "!chskill" command.
-
rank: player's skill is estimated from his rank (cf [pSet:rankMode]).
TrueSkill: player's skill is estimated from his TrueSkill(tm) ranking corresponding to current game type (Duel, FFA, Team or TeamFFA)
-
rank

[pSet:shareId]
Share ID (coop group)
-
When a manual ID share mode is selected ([set:idShareMode] set to "manual" or "clan"), "shareId" preferences are used by SPADS to know which players must share ID.
If your "shareId" preference is null, you won't share units with anyone.
Else, you will share units with all players of the same team having the same "shareId" preference as yours.
The "!coop <coopIdent>" command can be used as an alias of "!pSet shareId <coopIdent>"
-
<null>: ID share disabled
Any string: ID share enabled with other players having same "shareId" preference value
-
<null>

[pSet:clan]
Clan
-
Depending on the [set:clanMode] value, SPADS can recognize clans by tags in player names and/or "clan" preference value.
-
<null>: no clan selected
Any string: clan to be considered when balancing if "pref" mode is selected (refer to [set:clanMode])
-
<null>
